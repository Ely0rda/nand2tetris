// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    /*
    What do I need to create a PC
        - I need to be able to manipulate the output of the register
         and give it back to it as an input
        - At the same time I need to feed it the input
        - How can I do that Mux

    */
    //if load == 1 and inc == 1 then out(t+1) = in(t)
    //load is more important then inc 
    //if load == 1 and reset=1 then out(t+1) = 0
    //Importance orcer is like this the most important is reset then load, inc

    
    Inc16(in=out0, out=outInc);
    Mux16(a=out0, b=outInc, sel=inc, out=out1);
    Mux16(a=out1, b=in, sel=load, out=out2);
    Mux16(a=out2, b=false, sel=reset, out=out3);
    /*The problem with load of the register
        if we put load as load in will be passed
            if load == 1 out(t+1) = in(t)
            In our implementation :
                in(t) = int(t)*notinc*notres+inc*outInc+res*outRes
            if load == 0 out(t+1) = out(t)
                in will not be passed which is a problem because
                may be inc == 1 or res == 1 and I need to pass to the register
                the manipulated output
            This why ?
             loadPC = load+res+inc
              so even when load is 0 the register iwll get the manipulated output
             and if non of them equal 1 it will get the last output out(t+1) = out(t)         
    */
    Or(a=load, b=inc, out=load0);
    Or(a=load0, b=reset, out=loadPC);
    Register(in=out3, load=loadPC, out=out,out=out0);
    
    
    
}
    
