// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    //the adress size is 15 btis
    //The first left most bit will be the determinator if the input
    //is going to the RAM or io(Screen +Keyboard)
    //==> Dmux for determining where the input is going Ram or io
        //If the first bit is 0 then the ram
    DMux(in=load, sel=address[0], a=m, b=io);
        //RAM---------------------------------------------------------------------
        //Address 15 bits : 0 to 16383 in binary: 0-00000000000000 to 0-11111111111111
    RAM16k(in=in,load=m,address=address[1..14],out=outm);
        //If the first bit is 1 then the io devices
        //Adress 15 bits : 16384 to 24576 in binary : 100000000000000  to 110000000000000
    //Now the input devices have two memories 8k for screen and 1 register for keyboard
    //Scren adresses will be from 10-0000000000000 to 10-1111111111111
    //Keyboard adresse will be 11-0000000000000
    //The second left most bit will be used to determine if the input is going to
    //the keyboard ot to the screen
    // DMux(in=io, sel=address[1], a=s, b=k);
    //     //if the second bit is 0 the input goes to the screen
        Screen(in=in, load=io, address=address[2..14], out=outs);
    Keyboard(out=outk);
    //A Mux for selecting either the Screen output or the keyboard output
    Mux16(a=outs, b=outk, sel=address[1], out=outio);
    Mux16(a=outm, b=outio, sel=address[0], out=out);
    }